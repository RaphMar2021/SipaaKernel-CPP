#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_FILENAME 256
#define MAX_FILESYSTEM_SIZE 1024
#define MAX_PATH_LENGTH 512

// Structure to represent a file
struct File {
    char name[MAX_FILENAME];
    char content[MAX_FILESYSTEM_SIZE];
    size_t size;
};

// Structure to represent the file system
struct RamFileSystem {
    struct File* files;
    size_t filesystemSize;
};

// Structure to represent the mounted file system
struct MountedFileSystem {
    struct RamFileSystem* fs;
    char mountPoint[MAX_PATH_LENGTH];
};

// Structure to represent the file system manager
struct FileSystemManager {
    struct MountedFileSystem* mountedFS;
};

// Initialize the file system
void initFileSystem(struct RamFileSystem* fs, size_t size) {
    fs->files = (struct File*)malloc(sizeof(struct File) * size);
    fs->filesystemSize = size;
}

// Create a new file in the file system
int createFile(struct RamFileSystem* fs, const char* filename) {
    // Check if the file already exists
    for (size_t i = 0; i < fs->filesystemSize; ++i) {
        if (strcmp(fs->files[i].name, filename) == 0) {
            printf("Error: File '%s' already exists.\n", filename);
            return -1; // Return an error code
        }
    }

    // Find an empty slot for the new file
    for (size_t i = 0; i < fs->filesystemSize; ++i) {
        if (fs->files[i].size == 0) {
            snprintf(fs->files[i].name, MAX_FILENAME, "%s", filename);
            fs->files[i].size = 0;
            fs->files[i].content[0] = '\0';
            printf("File '%s' created successfully.\n", filename);
            return 0; // Return success
        }
    }

    printf("Error: File system is full.\n");
    return -1; // Return an error code
}

// Write data to a file
int writeFile(struct RamFileSystem* fs, const char* filename, const char* data) {
    for (size_t i = 0; i < fs->filesystemSize; ++i) {
        if (strcmp(fs->files[i].name, filename) == 0) {
            snprintf(fs->files[i].content, MAX_FILESYSTEM_SIZE, "%s", data);
            fs->files[i].size = strlen(data);
            printf("Data written to '%s' successfully.\n", filename);
            return 0; // Return success
        }
    }

    printf("Error: File '%s' not found.\n", filename);
    return -1; // Return an error code
}

// Read data from a file
void readFile(struct RamFileSystem* fs, const char* filename) {
    for (size_t i = 0; i < fs->filesystemSize; ++i) {
        if (strcmp(fs->files[i].name, filename) == 0) {
            printf("Content of '%s':\n%s\n", filename, fs->files[i].content);
            return;
        }
    }

    printf("Error: File '%s' not found.\n", filename);
}

// Mount the file system to a specific directory
void mountFileSystem(struct FileSystemManager* fsManager, struct RamFileSystem* fs, const char* mountPoint) {
    if (fsManager->mountedFS != NULL) {
        printf("Error: File system is already mounted at '%s'.\n", fsManager->mountedFS->mountPoint);
        return;
    }

    fsManager->mountedFS = (struct MountedFileSystem*)malloc(sizeof(struct MountedFileSystem));
    fsManager->mountedFS->fs = fs;
    snprintf(fsManager->mountedFS->mountPoint, MAX_PATH_LENGTH, "%s", mountPoint);
    printf("File system mounted at '%s'.\n", mountPoint);
}

// Unmount the file system
void unmountFileSystem(struct FileSystemManager* fsManager) {
    if (fsManager->mountedFS == NULL) {
        printf("Error: File system is not mounted.\n");
        return;
    }

    free(fsManager->mountedFS);
    fsManager->mountedFS = NULL;
    printf("File system unmounted.\n");
}

// Perform file operation based on the specified path
void performFileOperation(struct FileSystemManager* fsManager, const char* path) {
    if (fsManager->mountedFS == NULL) {
        printf("Error: File system is not mounted.\n");
        return;
    }

    // Extract filename from the path
    char filename[MAX_FILENAME];
    if (sscanf(path, "%*[^/]/%255s", filename) != 1) {
        printf("Error: Invalid path '%s'.\n", path);
        return;
    }

    // Perform the file operation based on the path
    if (strstr(path, fsManager->mountedFS->mountPoint) == path) {
        // Path is within the mounted file system
        if (strstr(path, "/create/") == path) {
            createFile(fsManager->mountedFS->fs, filename);
        } else if (strstr(path, "/write/") == path) {
            // Extract data to write from the path
            char data[MAX_FILESYSTEM_SIZE];
            if (sscanf(path, "%*[^/]/%*[^/]/%255[^\n]", data) != 1) {
                printf("Error: Invalid write operation for path '%s'.\n", path);
                return;
            }
            writeFile(fsManager->mountedFS->fs, filename, data);
        } else if (strstr(path, "/read/") == path) {
            readFile(fsManager->mountedFS->fs, filename);
        } else {
            printf("Error: Unknown operation for path '%s'.\n", path);
        }
    } else {
        printf("Error: Path '%s' is outside the mounted file system.\n", path);
    }
}

// Main function for testing the RAM-based file system
int main() {
    struct RamFileSystem myFileSystem;
    initFileSystem(&myFileSystem, 5);

    struct FileSystemManager fsManager;
    fsManager.mountedFS = NULL;

    // Mount the file system to "/mnt"
    mountFileSystem(&fsManager, &myFileSystem, "/mnt");

    // Example usage with direct path
    performFileOperation(&fsManager, "/mnt/create/file1");
    performFileOperation(&fsManager, "/mnt/write/file1/This is the content of file1.");
    performFileOperation(&fsManager, "/mnt/read/file1");

    // Unmount the file system
    unmountFileSystem(&fsManager);

    // Cleanup
    free(myFileSystem.files);

    return 0;
}
